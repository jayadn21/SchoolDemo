{"version":3,"sources":["webpack:///./node_modules/ng2-google-charts/google-chart/chart-html-tooltip.js","webpack:///./node_modules/ng2-google-charts/google-chart/chart-mouse-event.js","webpack:///./node_modules/ng2-google-charts/google-chart/google-chart.component.js","webpack:///./node_modules/ng2-google-charts/google-charts-loader.service.js","webpack:///./node_modules/ng2-google-charts/google-charts.module.js","webpack:///./node_modules/ng2-google-charts/index.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;ACdR;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;AChD8E;AAClD;AACT;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA,8DAA8D,gBAAgB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mCAAmC,yBAAyB;AAC5D;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,uDAAuD;AACvD,SAAS,kEAAoB;AAC7B,SAAS,iGAAmC;AAC5C,MAAM;AACN;AACA,kBAAkB,4DAAc;AAChC,wBAAwB,6DAAe;AACvC,wBAAwB,6DAAe;AACvC,yBAAyB,6DAAe;AACxC,uBAAuB,6DAAe;AACtC,sBAAsB,6DAAe;AACrC;AACA;AACA,CAAC;AACO;;;;;;;;;;;;;;;;AChQ8C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8BAA8B;AACnE,oCAAoC,6BAA6B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wBAAwB,iBAAiB,EAAE;AACxD,SAAS;AACT;AACA;AACA;AACA;AACA,qCAAqC,8BAA8B;AACnE,oCAAoC,6BAA6B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,4DAA4D;AAC5D,SAAS,gCAAgC,+HAAmC,IAAI;AAChF,MAAM;AACN;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;ACrGW;AACY;AACK;AACpC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,wDAAwD,WAAW;AACnE;AACA,CAAC;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBR;AAC2B;AACuC;AAClC","file":"Accounting-fees-management-fees-management-module~Attendance-attendance-setup-attendance-setup-modul~34ecccfe.js","sourcesContent":["var ChartHTMLTooltip = /** @class */ (function () {\n    function ChartHTMLTooltip(el) {\n        this.tooltipDOMElement = el;\n    }\n    ChartHTMLTooltip.prototype.setPosition = function (x, y) {\n        this.tooltipDOMElement.nativeElement.style.left = x + ChartHTMLTooltip.PIXELS;\n        this.tooltipDOMElement.nativeElement.style.top = y + ChartHTMLTooltip.PIXELS;\n    };\n    ChartHTMLTooltip.prototype.getDOMElement = function () {\n        return this.tooltipDOMElement;\n    };\n    ChartHTMLTooltip.PIXELS = 'px';\n    return ChartHTMLTooltip;\n}());\nexport { ChartHTMLTooltip };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ChartMouseEvent = /** @class */ (function () {\n    function ChartMouseEvent() {\n    }\n    return ChartMouseEvent;\n}());\nexport { ChartMouseEvent };\n/**\n * @deprecated Use ChartMouseOverEvent instead\n */\nvar /**\n * @deprecated Use ChartMouseOverEvent instead\n */\nMouseOverEvent = /** @class */ (function (_super) {\n    __extends(MouseOverEvent, _super);\n    function MouseOverEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MouseOverEvent;\n}(ChartMouseEvent));\n/**\n * @deprecated Use ChartMouseOverEvent instead\n */\nexport { MouseOverEvent };\nvar ChartMouseOverEvent = /** @class */ (function (_super) {\n    __extends(ChartMouseOverEvent, _super);\n    function ChartMouseOverEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ChartMouseOverEvent;\n}(ChartMouseEvent));\nexport { ChartMouseOverEvent };\nvar ChartMouseOutEvent = /** @class */ (function (_super) {\n    __extends(ChartMouseOutEvent, _super);\n    function ChartMouseOutEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ChartMouseOutEvent;\n}(ChartMouseEvent));\nexport { ChartMouseOutEvent };\n","import { Component, ElementRef, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { GoogleChartsLoaderService } from '../google-charts-loader.service';\nimport { ChartHTMLTooltip } from './chart-html-tooltip';\nvar GoogleChartComponent = /** @class */ (function () {\n    function GoogleChartComponent(el, loaderService) {\n        this.el = el;\n        this.loaderService = loaderService;\n        this.chartSelect = new EventEmitter();\n        this.chartReady = new EventEmitter();\n        this.chartError = new EventEmitter();\n        this.mouseOver = new EventEmitter();\n        this.mouseOut = new EventEmitter();\n    }\n    GoogleChartComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var key = 'data';\n        if (changes[key]) {\n            if (!this.data) {\n                return;\n            }\n            this.options = this.data.options;\n            this.loaderService.load(this.data.chartType, this.data.apiKey).then(function () {\n                if (_this.wrapper === undefined || _this.wrapper.getChartType() !== _this.data.chartType) {\n                    _this.wrapper = new google.visualization.ChartWrapper(_this.data);\n                }\n                else {\n                    _this.unregisterChartEvents();\n                    _this.wrapper.setDataTable(_this.data.dataTable);\n                    _this.wrapper.setOptions(_this.options);\n                }\n                _this.registerChartWrapperEvents();\n                _this.reformat();\n                _this.redraw();\n            });\n        }\n    };\n    GoogleChartComponent.prototype.redraw = function () {\n        this.reformat();\n        this.wrapper.draw(this.el.nativeElement.querySelector('div'));\n    };\n    /**\n     * Applies formatters to data columns, if defined\n     */\n    /**\n       * Applies formatters to data columns, if defined\n       */\n    GoogleChartComponent.prototype.reformat = /**\n       * Applies formatters to data columns, if defined\n       */\n    function () {\n        if (!this.data) {\n            return;\n        }\n        if (this.data.formatters !== undefined) {\n            for (var _i = 0, _a = this.data.formatters; _i < _a.length; _i++) {\n                var formatterConfig = _a[_i];\n                var formatterConstructor = google.visualization[formatterConfig.type];\n                var formatterOptions = formatterConfig.options;\n                var formatter = new formatterConstructor(formatterOptions);\n                for (var _b = 0, _c = formatterConfig.columns; _b < _c.length; _b++) {\n                    var col = _c[_b];\n                    formatter.format(this.wrapper.getDataTable(), col);\n                }\n            }\n        }\n    };\n    GoogleChartComponent.prototype.getSelectorBySeriesType = function (seriesType) {\n        var selectors = {\n            bars: 'bar#%s#%r',\n            haxis: 'hAxis#0#label',\n            line: 'point#%s#%r',\n            legend: 'legendentry#%s',\n            area: 'point#%s#%r'\n        };\n        var selector = selectors[seriesType];\n        return selector;\n    };\n    /**\n     * Given a column number, counts how many\n     * columns have rol==\"data\". Those are mapped\n     * one-to-one to the series array. When rol is not defined\n     * a column of type number means a series column.\n     * @param column to inspect\n     */\n    /**\n      * Given a column number, counts how many\n      * columns have rol==\"data\". Those are mapped\n      * one-to-one to the series array. When rol is not defined\n      * a column of type number means a series column.\n      * @param column to inspect\n      */\n    GoogleChartComponent.prototype.getSeriesByColumn = /**\n      * Given a column number, counts how many\n      * columns have rol==\"data\". Those are mapped\n      * one-to-one to the series array. When rol is not defined\n      * a column of type number means a series column.\n      * @param column to inspect\n      */\n    function (column) {\n        var series = 0;\n        var dataTable = this.wrapper.getDataTable();\n        for (var i = column - 1; i >= 0; i--) {\n            var role = dataTable.getColumnRole(i);\n            var type = dataTable.getColumnType(i);\n            if (role === 'data' || type === 'number') {\n                series++;\n            }\n        }\n        return series;\n    };\n    GoogleChartComponent.prototype.getBoundingBoxForItem = function (item) {\n        var boundingBox = { top: 0, left: 0, width: 0, height: 0 };\n        if (this.cli) {\n            var column = item.column;\n            var series = this.getSeriesByColumn(column);\n            var bar = item.row;\n            var row = item.row;\n            var seriesType = this.options.seriesType;\n            if (this.options.series && this.options.series[series] && this.options.series[series].type) {\n                seriesType = this.options.series[series].type;\n            }\n            if (seriesType) {\n                var selector = this.getSelectorBySeriesType(seriesType);\n                if (selector) {\n                    selector = selector.replace('%s', series + '').replace('%c', column + '').replace('%r', row + '');\n                    var box = this.cli.getBoundingBox(selector);\n                    if (box) {\n                        boundingBox = box;\n                    }\n                }\n            }\n        }\n        return boundingBox;\n    };\n    GoogleChartComponent.prototype.getValueAtPosition = function (position) {\n        if (position.row === null) {\n            return null;\n        }\n        var dataTable = this.wrapper.getDataTable();\n        var value = dataTable.getValue(position.row, position.column);\n        return value;\n    };\n    GoogleChartComponent.prototype.getColumnTypeAtPosition = function (position) {\n        var dataTable = this.wrapper.getDataTable();\n        var type = dataTable.getColumnType(position.column) || '';\n        return type;\n    };\n    GoogleChartComponent.prototype.getColumnLabelAtPosition = function (position) {\n        var dataTable = this.wrapper.getDataTable();\n        var type = dataTable.getColumnLabel(position.column) || '';\n        return type;\n    };\n    GoogleChartComponent.prototype.getHTMLTooltip = function () {\n        var tooltipER = new ElementRef(this.el.nativeElement.querySelector('.google-visualization-tooltip'));\n        return new ChartHTMLTooltip(tooltipER);\n    };\n    GoogleChartComponent.prototype.parseMouseEvent = function (item) {\n        var event = {\n            position: item,\n            boundingBox: this.getBoundingBoxForItem(item),\n            value: this.getValueAtPosition(item),\n            columnType: this.getColumnTypeAtPosition(item),\n            columnLabel: this.getColumnLabelAtPosition(item)\n        };\n        return event;\n    };\n    GoogleChartComponent.prototype.unregisterChartEvents = function () {\n        google.visualization.events.removeAllListeners(this.wrapper);\n    };\n    GoogleChartComponent.prototype.registerChartEvents = function () {\n        var _this = this;\n        if (this.mouseOver.observers.length > 0) {\n            var chart = this.wrapper.getChart();\n            this.cli = chart.getChartLayoutInterface();\n            google.visualization.events.addListener(chart, 'onmouseover', function (item) {\n                var event = _this.parseMouseEvent(item);\n                event.tooltip = _this.getHTMLTooltip();\n                _this.mouseOver.emit(event);\n            });\n        }\n        if (this.mouseOut.observers.length > 0) {\n            var chart = this.wrapper.getChart();\n            this.cli = chart.getChartLayoutInterface();\n            google.visualization.events.addListener(chart, 'onmouseout', function (item) {\n                var event = _this.parseMouseEvent(item);\n                _this.mouseOut.emit(event);\n            });\n        }\n    };\n    GoogleChartComponent.prototype.registerChartWrapperEvents = function () {\n        var _this = this;\n        google.visualization.events.addListener(this.wrapper, 'ready', function () {\n            _this.chartReady.emit({ message: 'Chart ready' });\n            _this.registerChartEvents();\n        });\n        google.visualization.events.addListener(this.wrapper, 'error', function (error) {\n            _this.chartError.emit(error);\n        });\n        google.visualization.events.addListener(this.wrapper, 'select', function () {\n            var event;\n            var selection = _this.wrapper.visualization.getSelection()[0];\n            if (selection !== undefined) {\n                var selectedRowValues = [];\n                var selectedRowFormattedValues = [];\n                if (selection.row !== null) {\n                    var dataTable = _this.wrapper.getDataTable();\n                    var numberOfColumns = dataTable.getNumberOfColumns();\n                    for (var i = 0; i < numberOfColumns; i++) {\n                        selectedRowValues.push(dataTable.getValue(selection.row, i));\n                        selectedRowFormattedValues.push(dataTable.getFormattedValue(selection.row, i));\n                    }\n                }\n                event = (_a = {\n                        message: 'select',\n                        row: selection.row,\n                        column: selection.column\n                    },\n                    _a['selectedRowValues'] = selectedRowValues,\n                    _a['selectedRowFormattedValues'] = selectedRowFormattedValues,\n                    _a);\n            }\n            else {\n                event = {\n                    message: 'deselect',\n                    row: null,\n                    column: null,\n                    selectedRowValues: [],\n                    selectedRowFormattedValues: []\n                };\n            }\n            _this.chartSelect.emit(event);\n            var _a;\n        });\n    };\n    GoogleChartComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'google-chart',\n                    template: '<div></div>',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                },] },\n    ];\n    /** @nocollapse */\n    GoogleChartComponent.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: GoogleChartsLoaderService, },\n    ]; };\n    GoogleChartComponent.propDecorators = {\n        \"data\": [{ type: Input },],\n        \"chartReady\": [{ type: Output },],\n        \"chartError\": [{ type: Output },],\n        \"chartSelect\": [{ type: Output },],\n        \"mouseOver\": [{ type: Output },],\n        \"mouseOut\": [{ type: Output },],\n    };\n    return GoogleChartComponent;\n}());\nexport { GoogleChartComponent };\n","import { Injectable, EventEmitter, LOCALE_ID, Inject } from '@angular/core';\nvar GoogleChartsLoaderService = /** @class */ (function () {\n    function GoogleChartsLoaderService(localeId) {\n        this.chartPackage = {\n            AnnotationChart: 'annotationchart',\n            AreaChart: 'corechart',\n            Bar: 'bar',\n            BarChart: 'corechart',\n            BubbleChart: 'corechart',\n            Calendar: 'calendar',\n            CandlestickChart: 'corechart',\n            ColumnChart: 'corechart',\n            ComboChart: 'corechart',\n            PieChart: 'corechart',\n            Gantt: 'gantt',\n            Gauge: 'gauge',\n            GeoChart: 'geochart',\n            Histogram: 'corechart',\n            Line: 'line',\n            LineChart: 'corechart',\n            Map: 'map',\n            OrgChart: 'orgchart',\n            Sankey: 'sankey',\n            Scatter: 'scatter',\n            ScatterChart: 'corechart',\n            SteppedAreaChart: 'corechart',\n            Table: 'table',\n            Timeline: 'timeline',\n            TreeMap: 'treemap',\n            WordTree: 'wordtree'\n        };\n        this.googleScriptLoadingNotifier = new EventEmitter();\n        this.googleScriptIsLoading = false;\n        this.localeId = localeId;\n    }\n    GoogleChartsLoaderService.prototype.load = function (chartType, apiKey) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (resolve === void 0) { resolve = Function.prototype; }\n            if (reject === void 0) { reject = Function.prototype; }\n            _this.loadGoogleChartsScript().then(function () {\n                var initializer = {\n                    packages: [_this.chartPackage[chartType]],\n                    language: _this.localeId,\n                    callback: resolve\n                };\n                if (apiKey) {\n                    initializer.mapsApiKey = apiKey;\n                }\n                google.charts.load('45.2', initializer);\n            }).catch(function (err) { return reject(); });\n        });\n    };\n    GoogleChartsLoaderService.prototype.loadGoogleChartsScript = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (resolve === void 0) { resolve = Function.prototype; }\n            if (reject === void 0) { reject = Function.prototype; }\n            if (typeof google !== 'undefined' && google.charts) {\n                resolve();\n            }\n            else if (!_this.googleScriptIsLoading) {\n                _this.googleScriptIsLoading = true;\n                var script = document.createElement('script');\n                script.type = 'text/javascript';\n                script.src = 'https://www.gstatic.com/charts/loader.js';\n                script.async = true;\n                script.defer = true;\n                script.onload = function () {\n                    _this.googleScriptIsLoading = false;\n                    _this.googleScriptLoadingNotifier.emit(true);\n                    resolve();\n                };\n                script.onerror = function () {\n                    _this.googleScriptIsLoading = false;\n                    _this.googleScriptLoadingNotifier.emit(false);\n                    reject();\n                };\n                document.getElementsByTagName('head')[0].appendChild(script);\n            }\n            else {\n                _this.googleScriptLoadingNotifier.subscribe(function (loaded) {\n                    if (loaded) {\n                        resolve();\n                    }\n                    else {\n                        reject();\n                    }\n                });\n            }\n        });\n    };\n    GoogleChartsLoaderService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    GoogleChartsLoaderService.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\n    ]; };\n    return GoogleChartsLoaderService;\n}());\nexport { GoogleChartsLoaderService };\n","import { NgModule } from '@angular/core';\nimport { GoogleChartComponent } from './google-chart/google-chart.component';\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\nvar Ng2GoogleChartsModule = /** @class */ (function () {\n    function Ng2GoogleChartsModule() {\n    }\n    Ng2GoogleChartsModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        GoogleChartComponent\n                    ],\n                    providers: [\n                        GoogleChartsLoaderService\n                    ],\n                    exports: [\n                        GoogleChartComponent\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    Ng2GoogleChartsModule.ctorParameters = function () { return []; };\n    return Ng2GoogleChartsModule;\n}());\nexport { Ng2GoogleChartsModule };\n","export * from './google-chart/google-chart.component';\nexport { ChartHTMLTooltip } from './google-chart/chart-html-tooltip';\nexport { ChartMouseOverEvent, ChartMouseOutEvent, MouseOverEvent } from './google-chart/chart-mouse-event';\nexport { Ng2GoogleChartsModule } from './google-charts.module';\n"],"sourceRoot":""}